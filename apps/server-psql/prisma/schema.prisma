generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Enquiry {
  id          String   @id @default(uuid())
  name        String
  email       String
  contactNum  String
  date        DateTime
  type        String
  description String
  followUp    Boolean  @default(false)
  followUpBy  Staff?   @relation(fields: [staffId], references: [id])
  staffId     String?
}

model Staff {
  id               String    @id @default(uuid())
  name             String
  email            String    @unique
  password         String
  contactNum       String    @unique
  isAdmin          Boolean
  accType          AccType   @default(staff)
  enquiriesHandled Enquiry[] // One staff can take care of zero or many Enquiries
  projects         Project[] // One staff can be in charge of zero or many Projects
}

model Client {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  isCompany Boolean   @default(false)
  accType   AccType   @default(client)
  contacts  Contact[] // Contains zero or many contacts associated with this Client
  projects  Project[] // Client can be part of zero or many Projects
}

model Vendor {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  accType   AccType   @default(vendor)
  employees Contact[] // Each Vendor can have many Employees
  projects  Project[] // Each Vendor can be involed in many Projects
}

model Contact {
  id         String   @id @default(uuid())
  name       String
  contactNum String   @unique
  client     Client[]
  vendor     Vendor[]
}

model Project {
  id          String       @id @default(uuid())
  title       String
  type        String
  startDate   DateTime
  endDate     DateTime
  location    String
  budget      Int
  inCharge    Staff        @relation(fields: [inChargeId], references: [id]) // A Project can only have one Staff in charge
  inChargeId  String
  client      Client       @relation(fields: [clientId], references: [id]) // A Project can only have one Client
  clientId    String
  checkpoints Checkpoint[] // A Project can have zero or many Checkpoints
  vendors     Vendor[] // Each Project can have many Vendors
  notes       Note[] // Each Project can have many Notes
  meetings    Meeting[] // Each Project can have many Meetings
  tasks       Task[] // Each Project can have many Tasks
}

model Checkpoint {
  id        String   @id @default(uuid())
  date      DateTime
  details   String
  project   Project  @relation(fields: [projectId], references: [id]) // Each Checkpoint is only for one Project
  projectId String
}

model Note {
  id        String   @id @default(uuid())
  date      DateTime
  content   String
  project   Project  @relation(fields: [projectId], references: [id]) // Each Note is only for one Project
  projectId String
}

model Meeting {
  id        String   @id @default(uuid())
  name      String
  date      DateTime
  project   Project? @relation(fields: [projectId], references: [id]) // Each Meeting is only for one Project
  projectId String
}

model Task {
  id          String   @id @default(uuid())
  dueBy       DateTime
  description String
  doneBy      String
  completed   Boolean  @default(false)
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
}

enum AccType {
  staff
  client
  vendor
}
